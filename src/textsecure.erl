%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.18.9 on {{2015,11,24},{13,10,43}}
-module(textsecure).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("textsecure.hrl").
-include("gpb.hrl").


encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #sender_key_message{} -> e_msg_sender_key_message(Msg);
      #key_exchange_message{} ->
	  e_msg_key_exchange_message(Msg);
      #prekey_whisper_message{} ->
	  e_msg_prekey_whisper_message(Msg);
      #whisper_message{} -> e_msg_whisper_message(Msg);
      #sender_key_distribution_message{} ->
	  e_msg_sender_key_distribution_message(Msg)
    end.


e_msg_sender_key_message(Msg) ->
    e_msg_sender_key_message(Msg, <<>>).


e_msg_sender_key_message(#sender_key_message{id = F1,
					     iteration = F2, ciphertext = F3},
			 Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_varint(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_type_bytes(F3, <<B2/binary, 26>>)
    end.

e_msg_key_exchange_message(Msg) ->
    e_msg_key_exchange_message(Msg, <<>>).


e_msg_key_exchange_message(#key_exchange_message{id =
						     F1,
						 baseKey = F2, ratchetKey = F3,
						 identityKey = F4,
						 baseKeySignature = F5},
			   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_varint(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_bytes(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bytes(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_bytes(F4, <<B3/binary, 34>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_type_bytes(F5, <<B4/binary, 42>>)
    end.

e_msg_prekey_whisper_message(Msg) ->
    e_msg_prekey_whisper_message(Msg, <<>>).


e_msg_prekey_whisper_message(#prekey_whisper_message{registrationId
							 = F1,
						     preKeyId = F2,
						     signedPreKeyId = F3,
						     baseKey = F4,
						     identityKey = F5,
						     message = F6},
			     Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_varint(F1, <<Bin/binary, 40>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 8>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 48>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_bytes(F4, <<B3/binary, 18>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_bytes(F5, <<B4/binary, 26>>)
	 end,
    if F6 == undefined -> B5;
       true -> e_type_bytes(F6, <<B5/binary, 34>>)
    end.

e_msg_whisper_message(Msg) ->
    e_msg_whisper_message(Msg, <<>>).


e_msg_whisper_message(#whisper_message{ratchetKey = F1,
				       counter = F2, previousCounter = F3,
				       ciphertext = F4},
		      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_bytes(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    if F4 == undefined -> B3;
       true -> e_type_bytes(F4, <<B3/binary, 34>>)
    end.

e_msg_sender_key_distribution_message(Msg) ->
    e_msg_sender_key_distribution_message(Msg, <<>>).


e_msg_sender_key_distribution_message(#sender_key_distribution_message{id
									   = F1,
								       iteration
									   = F2,
								       chainKey
									   = F3,
								       signingKey
									   =
									   F4},
				      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_varint(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bytes(F3, <<B2/binary, 26>>)
	 end,
    if F4 == undefined -> B3;
       true -> e_type_bytes(F4, <<B3/binary, 34>>)
    end.

e_type_bytes(Bytes, Bin) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      sender_key_message -> d_msg_sender_key_message(Bin);
      key_exchange_message -> d_msg_key_exchange_message(Bin);
      prekey_whisper_message ->
	  d_msg_prekey_whisper_message(Bin);
      whisper_message -> d_msg_whisper_message(Bin);
      sender_key_distribution_message ->
	  d_msg_sender_key_distribution_message(Bin)
    end.



d_msg_sender_key_message(Bin) ->
    dfp_read_field_def_sender_key_message(Bin, 0, 0,
					  undefined, undefined, undefined).

dfp_read_field_def_sender_key_message(<<8,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    d_field_sender_key_message_id(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_sender_key_message(<<16,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    d_field_sender_key_message_iteration(Rest, Z1, Z2, F1,
					 F2, F3);
dfp_read_field_def_sender_key_message(<<26,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    d_field_sender_key_message_ciphertext(Rest, Z1, Z2, F1,
					  F2, F3);
dfp_read_field_def_sender_key_message(<<>>, 0, 0, F1,
				      F2, F3) ->
    #sender_key_message{id = F1, iteration = F2,
			ciphertext = F3};
dfp_read_field_def_sender_key_message(Other, Z1, Z2, F1,
				      F2, F3) ->
    dg_read_field_def_sender_key_message(Other, Z1, Z2, F1,
					 F2, F3).

dg_read_field_def_sender_key_message(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_sender_key_message(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
dg_read_field_def_sender_key_message(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sender_key_message_id(Rest, 0, 0, F1, F2, F3);
      16 ->
	  d_field_sender_key_message_iteration(Rest, 0, 0, F1, F2,
					       F3);
      26 ->
	  d_field_sender_key_message_ciphertext(Rest, 0, 0, F1,
						F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sender_key_message(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_sender_key_message(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_sender_key_message(Rest, 0, 0, F1,
							 F2, F3);
	    5 -> skip_32_sender_key_message(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_sender_key_message(<<>>, 0, 0, F1, F2,
				     F3) ->
    #sender_key_message{id = F1, iteration = F2,
			ciphertext = F3}.

d_field_sender_key_message_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_sender_key_message_id(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
d_field_sender_key_message_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_sender_key_message(Rest, 0, 0,
					  NewFValue, F2, F3).


d_field_sender_key_message_iteration(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_sender_key_message_iteration(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
d_field_sender_key_message_iteration(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _, F3) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_sender_key_message(Rest, 0, 0, F1,
					  NewFValue, F3).


d_field_sender_key_message_ciphertext(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_sender_key_message_ciphertext(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
d_field_sender_key_message_ciphertext(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_sender_key_message(Rest2, 0, 0, F1,
					  F2, NewFValue).


skip_varint_sender_key_message(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    skip_varint_sender_key_message(Rest, Z1, Z2, F1, F2,
				   F3);
skip_varint_sender_key_message(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_sender_key_message(Rest, Z1, Z2, F1,
					  F2, F3).


skip_length_delimited_sender_key_message(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_sender_key_message(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
skip_length_delimited_sender_key_message(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sender_key_message(Rest2, 0, 0, F1,
					  F2, F3).


skip_32_sender_key_message(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3) ->
    dfp_read_field_def_sender_key_message(Rest, Z1, Z2, F1,
					  F2, F3).


skip_64_sender_key_message(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3) ->
    dfp_read_field_def_sender_key_message(Rest, Z1, Z2, F1,
					  F2, F3).


d_msg_key_exchange_message(Bin) ->
    dfp_read_field_def_key_exchange_message(Bin, 0, 0,
					    undefined, undefined, undefined,
					    undefined, undefined).

dfp_read_field_def_key_exchange_message(<<8,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_key_exchange_message_id(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5);
dfp_read_field_def_key_exchange_message(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_key_exchange_message_baseKey(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5);
dfp_read_field_def_key_exchange_message(<<26,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_key_exchange_message_ratchetKey(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5);
dfp_read_field_def_key_exchange_message(<<34,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_key_exchange_message_identityKey(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5);
dfp_read_field_def_key_exchange_message(<<42,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_key_exchange_message_baseKeySignature(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_key_exchange_message(<<>>, 0, 0, F1,
					F2, F3, F4, F5) ->
    #key_exchange_message{id = F1, baseKey = F2,
			  ratchetKey = F3, identityKey = F4,
			  baseKeySignature = F5};
dfp_read_field_def_key_exchange_message(Other, Z1, Z2,
					F1, F2, F3, F4, F5) ->
    dg_read_field_def_key_exchange_message(Other, Z1, Z2,
					   F1, F2, F3, F4, F5).

dg_read_field_def_key_exchange_message(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_key_exchange_message(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5);
dg_read_field_def_key_exchange_message(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_key_exchange_message_id(Rest, 0, 0, F1, F2, F3,
					  F4, F5);
      18 ->
	  d_field_key_exchange_message_baseKey(Rest, 0, 0, F1, F2,
					       F3, F4, F5);
      26 ->
	  d_field_key_exchange_message_ratchetKey(Rest, 0, 0, F1,
						  F2, F3, F4, F5);
      34 ->
	  d_field_key_exchange_message_identityKey(Rest, 0, 0, F1,
						   F2, F3, F4, F5);
      42 ->
	  d_field_key_exchange_message_baseKeySignature(Rest, 0,
							0, F1, F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_key_exchange_message(Rest, 0, 0, F1, F2, F3,
						 F4, F5);
	    1 ->
		skip_64_key_exchange_message(Rest, 0, 0, F1, F2, F3, F4,
					     F5);
	    2 ->
		skip_length_delimited_key_exchange_message(Rest, 0, 0,
							   F1, F2, F3, F4, F5);
	    5 ->
		skip_32_key_exchange_message(Rest, 0, 0, F1, F2, F3, F4,
					     F5)
	  end
    end;
dg_read_field_def_key_exchange_message(<<>>, 0, 0, F1,
				       F2, F3, F4, F5) ->
    #key_exchange_message{id = F1, baseKey = F2,
			  ratchetKey = F3, identityKey = F4,
			  baseKeySignature = F5}.

d_field_key_exchange_message_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_key_exchange_message_id(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_key_exchange_message_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, F4, F5) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_key_exchange_message(Rest, 0, 0,
					    NewFValue, F2, F3, F4, F5).


d_field_key_exchange_message_baseKey(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_key_exchange_message_baseKey(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_key_exchange_message_baseKey(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_key_exchange_message(Rest2, 0, 0, F1,
					    NewFValue, F3, F4, F5).


d_field_key_exchange_message_ratchetKey(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_key_exchange_message_ratchetKey(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_key_exchange_message_ratchetKey(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, _, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_key_exchange_message(Rest2, 0, 0, F1,
					    F2, NewFValue, F4, F5).


d_field_key_exchange_message_identityKey(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_key_exchange_message_identityKey(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_key_exchange_message_identityKey(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, _, F5) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_key_exchange_message(Rest2, 0, 0, F1,
					    F2, F3, NewFValue, F5).


d_field_key_exchange_message_baseKeySignature(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_key_exchange_message_baseKeySignature(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5);
d_field_key_exchange_message_baseKeySignature(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_key_exchange_message(Rest2, 0, 0, F1,
					    F2, F3, F4, NewFValue).


skip_varint_key_exchange_message(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5) ->
    skip_varint_key_exchange_message(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5);
skip_varint_key_exchange_message(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_key_exchange_message(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5).


skip_length_delimited_key_exchange_message(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_key_exchange_message(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5);
skip_length_delimited_key_exchange_message(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_key_exchange_message(Rest2, 0, 0, F1,
					    F2, F3, F4, F5).


skip_32_key_exchange_message(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_key_exchange_message(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5).


skip_64_key_exchange_message(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_key_exchange_message(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5).


d_msg_prekey_whisper_message(Bin) ->
    dfp_read_field_def_prekey_whisper_message(Bin, 0, 0,
					      undefined, undefined, undefined,
					      undefined, undefined, undefined).

dfp_read_field_def_prekey_whisper_message(<<40,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_prekey_whisper_message_registrationId(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6);
dfp_read_field_def_prekey_whisper_message(<<8,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_prekey_whisper_message_preKeyId(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6);
dfp_read_field_def_prekey_whisper_message(<<48,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_prekey_whisper_message_signedPreKeyId(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6);
dfp_read_field_def_prekey_whisper_message(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_prekey_whisper_message_baseKey(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6);
dfp_read_field_def_prekey_whisper_message(<<26,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_prekey_whisper_message_identityKey(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6);
dfp_read_field_def_prekey_whisper_message(<<34,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_prekey_whisper_message_message(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6);
dfp_read_field_def_prekey_whisper_message(<<>>, 0, 0,
					  F1, F2, F3, F4, F5, F6) ->
    #prekey_whisper_message{registrationId = F1,
			    preKeyId = F2, signedPreKeyId = F3, baseKey = F4,
			    identityKey = F5, message = F6};
dfp_read_field_def_prekey_whisper_message(Other, Z1, Z2,
					  F1, F2, F3, F4, F5, F6) ->
    dg_read_field_def_prekey_whisper_message(Other, Z1, Z2,
					     F1, F2, F3, F4, F5, F6).

dg_read_field_def_prekey_whisper_message(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_prekey_whisper_message(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6);
dg_read_field_def_prekey_whisper_message(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      40 ->
	  d_field_prekey_whisper_message_registrationId(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6);
      8 ->
	  d_field_prekey_whisper_message_preKeyId(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6);
      48 ->
	  d_field_prekey_whisper_message_signedPreKeyId(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6);
      18 ->
	  d_field_prekey_whisper_message_baseKey(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6);
      26 ->
	  d_field_prekey_whisper_message_identityKey(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6);
      34 ->
	  d_field_prekey_whisper_message_message(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_prekey_whisper_message(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6);
	    1 ->
		skip_64_prekey_whisper_message(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6);
	    2 ->
		skip_length_delimited_prekey_whisper_message(Rest, 0, 0,
							     F1, F2, F3, F4, F5,
							     F6);
	    5 ->
		skip_32_prekey_whisper_message(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6)
	  end
    end;
dg_read_field_def_prekey_whisper_message(<<>>, 0, 0, F1,
					 F2, F3, F4, F5, F6) ->
    #prekey_whisper_message{registrationId = F1,
			    preKeyId = F2, signedPreKeyId = F3, baseKey = F4,
			    identityKey = F5, message = F6}.

d_field_prekey_whisper_message_registrationId(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_prekey_whisper_message_registrationId(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6);
d_field_prekey_whisper_message_registrationId(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F2, F3, F4, F5, F6) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_prekey_whisper_message(Rest, 0, 0,
					      NewFValue, F2, F3, F4, F5, F6).


d_field_prekey_whisper_message_preKeyId(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_prekey_whisper_message_preKeyId(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6);
d_field_prekey_whisper_message_preKeyId(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, _, F3, F4, F5, F6) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_prekey_whisper_message(Rest, 0, 0,
					      F1, NewFValue, F3, F4, F5, F6).


d_field_prekey_whisper_message_signedPreKeyId(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_prekey_whisper_message_signedPreKeyId(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6);
d_field_prekey_whisper_message_signedPreKeyId(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, _, F4, F5, F6) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_prekey_whisper_message(Rest, 0, 0,
					      F1, F2, NewFValue, F4, F5, F6).


d_field_prekey_whisper_message_baseKey(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_prekey_whisper_message_baseKey(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6);
d_field_prekey_whisper_message_baseKey(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, _, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_prekey_whisper_message(Rest2, 0, 0,
					      F1, F2, F3, NewFValue, F5, F6).


d_field_prekey_whisper_message_identityKey(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_prekey_whisper_message_identityKey(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6);
d_field_prekey_whisper_message_identityKey(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, _, F6) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_prekey_whisper_message(Rest2, 0, 0,
					      F1, F2, F3, F4, NewFValue, F6).


d_field_prekey_whisper_message_message(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_prekey_whisper_message_message(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6);
d_field_prekey_whisper_message_message(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_prekey_whisper_message(Rest2, 0, 0,
					      F1, F2, F3, F4, F5, NewFValue).


skip_varint_prekey_whisper_message(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    skip_varint_prekey_whisper_message(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6);
skip_varint_prekey_whisper_message(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_prekey_whisper_message(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6).


skip_length_delimited_prekey_whisper_message(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_prekey_whisper_message(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6);
skip_length_delimited_prekey_whisper_message(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_prekey_whisper_message(Rest2, 0, 0,
					      F1, F2, F3, F4, F5, F6).


skip_32_prekey_whisper_message(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_prekey_whisper_message(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6).


skip_64_prekey_whisper_message(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_prekey_whisper_message(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6).


d_msg_whisper_message(Bin) ->
    dfp_read_field_def_whisper_message(Bin, 0, 0, undefined,
				       undefined, undefined, undefined).

dfp_read_field_def_whisper_message(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4) ->
    d_field_whisper_message_ratchetKey(Rest, Z1, Z2, F1, F2,
				       F3, F4);
dfp_read_field_def_whisper_message(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4) ->
    d_field_whisper_message_counter(Rest, Z1, Z2, F1, F2,
				    F3, F4);
dfp_read_field_def_whisper_message(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4) ->
    d_field_whisper_message_previousCounter(Rest, Z1, Z2,
					    F1, F2, F3, F4);
dfp_read_field_def_whisper_message(<<34, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4) ->
    d_field_whisper_message_ciphertext(Rest, Z1, Z2, F1, F2,
				       F3, F4);
dfp_read_field_def_whisper_message(<<>>, 0, 0, F1, F2,
				   F3, F4) ->
    #whisper_message{ratchetKey = F1, counter = F2,
		     previousCounter = F3, ciphertext = F4};
dfp_read_field_def_whisper_message(Other, Z1, Z2, F1,
				   F2, F3, F4) ->
    dg_read_field_def_whisper_message(Other, Z1, Z2, F1, F2,
				      F3, F4).

dg_read_field_def_whisper_message(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_whisper_message(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_whisper_message(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_whisper_message_ratchetKey(Rest, 0, 0, F1, F2,
					     F3, F4);
      16 ->
	  d_field_whisper_message_counter(Rest, 0, 0, F1, F2, F3,
					  F4);
      24 ->
	  d_field_whisper_message_previousCounter(Rest, 0, 0, F1,
						  F2, F3, F4);
      34 ->
	  d_field_whisper_message_ciphertext(Rest, 0, 0, F1, F2,
					     F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_whisper_message(Rest, 0, 0, F1, F2, F3, F4);
	    1 ->
		skip_64_whisper_message(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_whisper_message(Rest, 0, 0, F1,
						      F2, F3, F4);
	    5 -> skip_32_whisper_message(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_whisper_message(<<>>, 0, 0, F1, F2,
				  F3, F4) ->
    #whisper_message{ratchetKey = F1, counter = F2,
		     previousCounter = F3, ciphertext = F4}.

d_field_whisper_message_ratchetKey(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_whisper_message_ratchetKey(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4);
d_field_whisper_message_ratchetKey(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_whisper_message(Rest2, 0, 0,
				       NewFValue, F2, F3, F4).


d_field_whisper_message_counter(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_whisper_message_counter(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4);
d_field_whisper_message_counter(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_whisper_message(Rest, 0, 0, F1,
				       NewFValue, F3, F4).


d_field_whisper_message_previousCounter(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_whisper_message_previousCounter(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4);
d_field_whisper_message_previousCounter(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, _, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_whisper_message(Rest, 0, 0, F1, F2,
				       NewFValue, F4).


d_field_whisper_message_ciphertext(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_whisper_message_ciphertext(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4);
d_field_whisper_message_ciphertext(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_whisper_message(Rest2, 0, 0, F1, F2,
				       F3, NewFValue).


skip_varint_whisper_message(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4) ->
    skip_varint_whisper_message(Rest, Z1, Z2, F1, F2, F3,
				F4);
skip_varint_whisper_message(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_whisper_message(Rest, Z1, Z2, F1, F2,
				       F3, F4).


skip_length_delimited_whisper_message(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_whisper_message(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_whisper_message(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_whisper_message(Rest2, 0, 0, F1, F2,
				       F3, F4).


skip_32_whisper_message(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4) ->
    dfp_read_field_def_whisper_message(Rest, Z1, Z2, F1, F2,
				       F3, F4).


skip_64_whisper_message(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4) ->
    dfp_read_field_def_whisper_message(Rest, Z1, Z2, F1, F2,
				       F3, F4).


d_msg_sender_key_distribution_message(Bin) ->
    dfp_read_field_def_sender_key_distribution_message(Bin,
						       0, 0, undefined,
						       undefined, undefined,
						       undefined).

dfp_read_field_def_sender_key_distribution_message(<<8,
						     Rest/binary>>,
						   Z1, Z2, F1, F2, F3, F4) ->
    d_field_sender_key_distribution_message_id(Rest, Z1, Z2,
					       F1, F2, F3, F4);
dfp_read_field_def_sender_key_distribution_message(<<16,
						     Rest/binary>>,
						   Z1, Z2, F1, F2, F3, F4) ->
    d_field_sender_key_distribution_message_iteration(Rest,
						      Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_sender_key_distribution_message(<<26,
						     Rest/binary>>,
						   Z1, Z2, F1, F2, F3, F4) ->
    d_field_sender_key_distribution_message_chainKey(Rest,
						     Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_sender_key_distribution_message(<<34,
						     Rest/binary>>,
						   Z1, Z2, F1, F2, F3, F4) ->
    d_field_sender_key_distribution_message_signingKey(Rest,
						       Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_sender_key_distribution_message(<<>>,
						   0, 0, F1, F2, F3, F4) ->
    #sender_key_distribution_message{id = F1,
				     iteration = F2, chainKey = F3,
				     signingKey = F4};
dfp_read_field_def_sender_key_distribution_message(Other,
						   Z1, Z2, F1, F2, F3, F4) ->
    dg_read_field_def_sender_key_distribution_message(Other,
						      Z1, Z2, F1, F2, F3, F4).

dg_read_field_def_sender_key_distribution_message(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_sender_key_distribution_message(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4);
dg_read_field_def_sender_key_distribution_message(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sender_key_distribution_message_id(Rest, 0, 0,
						     F1, F2, F3, F4);
      16 ->
	  d_field_sender_key_distribution_message_iteration(Rest,
							    0, 0, F1, F2, F3,
							    F4);
      26 ->
	  d_field_sender_key_distribution_message_chainKey(Rest,
							   0, 0, F1, F2, F3,
							   F4);
      34 ->
	  d_field_sender_key_distribution_message_signingKey(Rest,
							     0, 0, F1, F2, F3,
							     F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sender_key_distribution_message(Rest, 0, 0,
							    F1, F2, F3, F4);
	    1 ->
		skip_64_sender_key_distribution_message(Rest, 0, 0, F1,
							F2, F3, F4);
	    2 ->
		skip_length_delimited_sender_key_distribution_message(Rest,
								      0, 0, F1,
								      F2, F3,
								      F4);
	    5 ->
		skip_32_sender_key_distribution_message(Rest, 0, 0, F1,
							F2, F3, F4)
	  end
    end;
dg_read_field_def_sender_key_distribution_message(<<>>,
						  0, 0, F1, F2, F3, F4) ->
    #sender_key_distribution_message{id = F1,
				     iteration = F2, chainKey = F3,
				     signingKey = F4}.

d_field_sender_key_distribution_message_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_sender_key_distribution_message_id(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4);
d_field_sender_key_distribution_message_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F2, F3, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_sender_key_distribution_message(Rest,
						       0, 0, NewFValue, F2, F3,
						       F4).


d_field_sender_key_distribution_message_iteration(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_sender_key_distribution_message_iteration(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4);
d_field_sender_key_distribution_message_iteration(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, _, F3, F4) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_sender_key_distribution_message(Rest,
						       0, 0, F1, NewFValue, F3,
						       F4).


d_field_sender_key_distribution_message_chainKey(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_sender_key_distribution_message_chainKey(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4);
d_field_sender_key_distribution_message_chainKey(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, _, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_sender_key_distribution_message(Rest2,
						       0, 0, F1, F2, NewFValue,
						       F4).


d_field_sender_key_distribution_message_signingKey(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_sender_key_distribution_message_signingKey(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4);
d_field_sender_key_distribution_message_signingKey(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_sender_key_distribution_message(Rest2,
						       0, 0, F1, F2, F3,
						       NewFValue).


skip_varint_sender_key_distribution_message(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4) ->
    skip_varint_sender_key_distribution_message(Rest, Z1,
						Z2, F1, F2, F3, F4);
skip_varint_sender_key_distribution_message(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_sender_key_distribution_message(Rest,
						       Z1, Z2, F1, F2, F3, F4).


skip_length_delimited_sender_key_distribution_message(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_sender_key_distribution_message(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4);
skip_length_delimited_sender_key_distribution_message(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sender_key_distribution_message(Rest2,
						       0, 0, F1, F2, F3, F4).


skip_32_sender_key_distribution_message(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_sender_key_distribution_message(Rest,
						       Z1, Z2, F1, F2, F3, F4).


skip_64_sender_key_distribution_message(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_sender_key_distribution_message(Rest,
						       Z1, Z2, F1, F2, F3, F4).




merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #sender_key_message{} ->
	  merge_msg_sender_key_message(Prev, New);
      #key_exchange_message{} ->
	  merge_msg_key_exchange_message(Prev, New);
      #prekey_whisper_message{} ->
	  merge_msg_prekey_whisper_message(Prev, New);
      #whisper_message{} ->
	  merge_msg_whisper_message(Prev, New);
      #sender_key_distribution_message{} ->
	  merge_msg_sender_key_distribution_message(Prev, New)
    end.

merge_msg_sender_key_message(#sender_key_message{id =
						     PFid,
						 iteration = PFiteration,
						 ciphertext = PFciphertext},
			     #sender_key_message{id = NFid,
						 iteration = NFiteration,
						 ciphertext = NFciphertext}) ->
    #sender_key_message{id =
			    if NFid =:= undefined -> PFid;
			       true -> NFid
			    end,
			iteration =
			    if NFiteration =:= undefined -> PFiteration;
			       true -> NFiteration
			    end,
			ciphertext =
			    if NFciphertext =:= undefined -> PFciphertext;
			       true -> NFciphertext
			    end}.

merge_msg_key_exchange_message(#key_exchange_message{id
							 = PFid,
						     baseKey = PFbaseKey,
						     ratchetKey = PFratchetKey,
						     identityKey =
							 PFidentityKey,
						     baseKeySignature =
							 PFbaseKeySignature},
			       #key_exchange_message{id = NFid,
						     baseKey = NFbaseKey,
						     ratchetKey = NFratchetKey,
						     identityKey =
							 NFidentityKey,
						     baseKeySignature =
							 NFbaseKeySignature}) ->
    #key_exchange_message{id =
			      if NFid =:= undefined -> PFid;
				 true -> NFid
			      end,
			  baseKey =
			      if NFbaseKey =:= undefined -> PFbaseKey;
				 true -> NFbaseKey
			      end,
			  ratchetKey =
			      if NFratchetKey =:= undefined -> PFratchetKey;
				 true -> NFratchetKey
			      end,
			  identityKey =
			      if NFidentityKey =:= undefined -> PFidentityKey;
				 true -> NFidentityKey
			      end,
			  baseKeySignature =
			      if NFbaseKeySignature =:= undefined ->
				     PFbaseKeySignature;
				 true -> NFbaseKeySignature
			      end}.

merge_msg_prekey_whisper_message(#prekey_whisper_message{registrationId
							     = PFregistrationId,
							 preKeyId = PFpreKeyId,
							 signedPreKeyId =
							     PFsignedPreKeyId,
							 baseKey = PFbaseKey,
							 identityKey =
							     PFidentityKey,
							 message = PFmessage},
				 #prekey_whisper_message{registrationId =
							     NFregistrationId,
							 preKeyId = NFpreKeyId,
							 signedPreKeyId =
							     NFsignedPreKeyId,
							 baseKey = NFbaseKey,
							 identityKey =
							     NFidentityKey,
							 message =
							     NFmessage}) ->
    #prekey_whisper_message{registrationId =
				if NFregistrationId =:= undefined ->
				       PFregistrationId;
				   true -> NFregistrationId
				end,
			    preKeyId =
				if NFpreKeyId =:= undefined -> PFpreKeyId;
				   true -> NFpreKeyId
				end,
			    signedPreKeyId =
				if NFsignedPreKeyId =:= undefined ->
				       PFsignedPreKeyId;
				   true -> NFsignedPreKeyId
				end,
			    baseKey =
				if NFbaseKey =:= undefined -> PFbaseKey;
				   true -> NFbaseKey
				end,
			    identityKey =
				if NFidentityKey =:= undefined -> PFidentityKey;
				   true -> NFidentityKey
				end,
			    message =
				if NFmessage =:= undefined -> PFmessage;
				   true -> NFmessage
				end}.

merge_msg_whisper_message(#whisper_message{ratchetKey =
					       PFratchetKey,
					   counter = PFcounter,
					   previousCounter = PFpreviousCounter,
					   ciphertext = PFciphertext},
			  #whisper_message{ratchetKey = NFratchetKey,
					   counter = NFcounter,
					   previousCounter = NFpreviousCounter,
					   ciphertext = NFciphertext}) ->
    #whisper_message{ratchetKey =
			 if NFratchetKey =:= undefined -> PFratchetKey;
			    true -> NFratchetKey
			 end,
		     counter =
			 if NFcounter =:= undefined -> PFcounter;
			    true -> NFcounter
			 end,
		     previousCounter =
			 if NFpreviousCounter =:= undefined ->
				PFpreviousCounter;
			    true -> NFpreviousCounter
			 end,
		     ciphertext =
			 if NFciphertext =:= undefined -> PFciphertext;
			    true -> NFciphertext
			 end}.

merge_msg_sender_key_distribution_message(#sender_key_distribution_message{id
									       =
									       PFid,
									   iteration
									       =
									       PFiteration,
									   chainKey
									       =
									       PFchainKey,
									   signingKey
									       =
									       PFsigningKey},
					  #sender_key_distribution_message{id =
									       NFid,
									   iteration
									       =
									       NFiteration,
									   chainKey
									       =
									       NFchainKey,
									   signingKey
									       =
									       NFsigningKey}) ->
    #sender_key_distribution_message{id =
					 if NFid =:= undefined -> PFid;
					    true -> NFid
					 end,
				     iteration =
					 if NFiteration =:= undefined ->
						PFiteration;
					    true -> NFiteration
					 end,
				     chainKey =
					 if NFchainKey =:= undefined ->
						PFchainKey;
					    true -> NFchainKey
					 end,
				     signingKey =
					 if NFsigningKey =:= undefined ->
						PFsigningKey;
					    true -> NFsigningKey
					 end}.



verify_msg(Msg) ->
    case Msg of
      #sender_key_message{} ->
	  v_msg_sender_key_message(Msg, [sender_key_message]);
      #key_exchange_message{} ->
	  v_msg_key_exchange_message(Msg, [key_exchange_message]);
      #prekey_whisper_message{} ->
	  v_msg_prekey_whisper_message(Msg,
				       [prekey_whisper_message]);
      #whisper_message{} ->
	  v_msg_whisper_message(Msg, [whisper_message]);
      #sender_key_distribution_message{} ->
	  v_msg_sender_key_distribution_message(Msg,
						[sender_key_distribution_message]);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_sender_key_message(#sender_key_message{id = F1,
					     iteration = F2, ciphertext = F3},
			 Path) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [iteration | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [ciphertext | Path])
    end,
    ok.

v_msg_key_exchange_message(#key_exchange_message{id =
						     F1,
						 baseKey = F2, ratchetKey = F3,
						 identityKey = F4,
						 baseKeySignature = F5},
			   Path) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [baseKey | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [ratchetKey | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [identityKey | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [baseKeySignature | Path])
    end,
    ok.

v_msg_prekey_whisper_message(#prekey_whisper_message{registrationId
							 = F1,
						     preKeyId = F2,
						     signedPreKeyId = F3,
						     baseKey = F4,
						     identityKey = F5,
						     message = F6},
			     Path) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [registrationId | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [preKeyId | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [signedPreKeyId | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [baseKey | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [identityKey | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [message | Path])
    end,
    ok.

v_msg_whisper_message(#whisper_message{ratchetKey = F1,
				       counter = F2, previousCounter = F3,
				       ciphertext = F4},
		      Path) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [ratchetKey | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [counter | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [previousCounter | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [ciphertext | Path])
    end,
    ok.

v_msg_sender_key_distribution_message(#sender_key_distribution_message{id
									   = F1,
								       iteration
									   = F2,
								       chainKey
									   = F3,
								       signingKey
									   =
									   F4},
				      Path) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [iteration | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [chainKey | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [signingKey | Path])
    end,
    ok.

v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{msg, sender_key_message},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = iteration, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = ciphertext, fnum = 3, rnum = 4,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, key_exchange_message},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = baseKey, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = ratchetKey, fnum = 3, rnum = 4,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = identityKey, fnum = 4, rnum = 5,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = baseKeySignature, fnum = 5, rnum = 6,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, prekey_whisper_message},
      [#field{name = registrationId, fnum = 5, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = preKeyId, fnum = 1, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = signedPreKeyId, fnum = 6, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = baseKey, fnum = 2, rnum = 5, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = identityKey, fnum = 3, rnum = 6,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = message, fnum = 4, rnum = 7, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, whisper_message},
      [#field{name = ratchetKey, fnum = 1, rnum = 2,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = counter, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = previousCounter, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = ciphertext, fnum = 4, rnum = 5,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, sender_key_distribution_message},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = iteration, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = chainKey, fnum = 3, rnum = 4,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = signingKey, fnum = 4, rnum = 5,
	      type = bytes, occurrence = optional, opts = []}]}].


get_msg_names() ->
    [sender_key_message, key_exchange_message,
     prekey_whisper_message, whisper_message,
     sender_key_distribution_message].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(sender_key_message) ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = iteration, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = ciphertext, fnum = 3, rnum = 4,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def(key_exchange_message) ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = baseKey, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = ratchetKey, fnum = 3, rnum = 4,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = identityKey, fnum = 4, rnum = 5,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = baseKeySignature, fnum = 5, rnum = 6,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def(prekey_whisper_message) ->
    [#field{name = registrationId, fnum = 5, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = preKeyId, fnum = 1, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = signedPreKeyId, fnum = 6, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = baseKey, fnum = 2, rnum = 5, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = identityKey, fnum = 3, rnum = 6,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = message, fnum = 4, rnum = 7, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def(whisper_message) ->
    [#field{name = ratchetKey, fnum = 1, rnum = 2,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = counter, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = previousCounter, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = ciphertext, fnum = 4, rnum = 5,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def(sender_key_distribution_message) ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = iteration, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = chainKey, fnum = 3, rnum = 4,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = signingKey, fnum = 4, rnum = 5,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> textsecure.



gpb_version_as_string() ->
    "3.18.9".

gpb_version_as_list() ->
    [3,18,9].
